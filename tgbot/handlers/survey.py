import random
import re
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from ..misc.states import FormStates
from tgbot.keyboards.reply import start, share_contact, step_back, submit
from aiogram.types import ReplyKeyboardRemove

questions = [
    "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è",
    "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (11.11.1111)",
    "–ö–∞–∫–æ–π —É –≤–∞—Å –≤–µ—Å (–≤ –∫–≥)?",
    "–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–æ—Å—Ç (–≤ —Å–º)?",
    "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Å–µ–π—á–∞—Å –∂–∏–≤–µ—Ç–µ?",
    "–ö—Ç–æ –≤—ã –ø–æ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏?",
    "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥–∞–ª–∏–∏",
    "–ß–µ–º –≤—ã —É–≤–ª–µ—á–µ–Ω—ã –≤ –∂–∏–∑–Ω–∏?",
    "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∏–ª–∏ –Ω–∞ –∫–æ–≥–æ —É—á–∏—Ç–µ—Å—å",
    "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –≤ Instagram",
    "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+998991234567)",
    "–ö–æ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–π?",
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ",
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ '–ë–æ–π —Å —Ç–µ–Ω—å—é'",
    "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –≤–∏–¥–µ–æ–∫–ª–∏–ø, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∑–∞–±–∞–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å –≤–∞–º–∏"
]

date_regex = re.compile(
    r"(\b(0?[1-9]|[12]\d|30|31)[^\w\d\r\n:](0?[1-9]|1[0-2])[^\w\d\r\n:](\d{4}|\d{2})\b)|(\b(0?[1-9]|1[0-2])[^\w\d\r\n:](0?[1-9]|[12]\d|30|31)[^\w\d\r\n:](\d{4}|\d{2})\b)")

phone_number_regex = re.compile(r"^(\+?\d{1,3}-?)?\d{2,3}-?\d{3}-?\d{2}-?\d{2}$")


async def start_handler(message: types.Message):
    if int(message.chat.id) < 0:
        await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")
    await FormStates.START_SURVEY.set()
    await message.answer("""–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç GonzoFight ü´°

–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ 6 –∏ 7 –∫–∞—Ä–¥—ã, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É

–ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –∞–Ω–∫–µ—Ç—ã –≤–∞–∂–µ–Ω. –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–µ—Ä—å–µ–∑–Ω–æ, –æ—Ç —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –≤—ã—Å—Ç—É–ø–∞–µ—Ç–µ –≤—ã —É –Ω–∞—Å –∏–ª–∏ –Ω–µ—Ç 

–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –∫ –Ω–∞–º —á–µ—Ä–µ–∑ –∑–Ω–∞–∫–æ–º—ã—Ö, –∑–∞–ø–ª–∞—Ç–∏–≤ –∫–æ–º—É-—Ç–æ, –ø—Ä–∏–¥—è –∫ –Ω–∞–º –≤ –æ—Ñ–∏—Å –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏–≤ —á—Ç–æ-—Ç–æ –µ—â–µ. –£—á–∞—Å—Ç–∏–µ –≤ 
GonzoFight –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ. –í—Å–µ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—à–µ–π —Ö–∞—Ä–∏–∑–º—ã. 
–ü–æ–∫–∞–∂–∏—Ç–µ –µ–µ –≤ –∞–Ω–∫–µ—Ç–µ –∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –≤—ã—Å—Ç—É–ø–∞—Ç—å –Ω–∞ GonzoFight""", reply_markup=start)


async def start_survey(message: types.Message):
    response = random.choice(["–ï—Å–ª–∏ –≥–æ—Ç–æ–≤, –Ω–∞–ø–∏—à–∏ '–ü–æ–µ—Ö–∞–ª–∏' !", "–ù–∞–ø–∏—à–∏ '–ü–æ–µ—Ö–∞–ª–∏'", "–ù–∞–∂–º–∏ –Ω–∞ '–ü–æ–µ—Ö–∞–ª–∏'."])
    if message.text == "–ü–æ–µ—Ö–∞–ª–∏":
        await FormStates.FULL_NAME.set()
        await message.answer(questions[0], reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(response)


async def full_name_handler(message: types.Message, state: FSMContext):
    answer = message.text.strip()
    await state.update_data(full_name=answer)
    await FormStates.DATE_OF_BIRTH.set()
    await message.answer(questions[1], reply_markup=step_back)


async def date_of_birth_handler(message: types.Message, state: FSMContext, order=2):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.FULL_NAME.set()
        await message.answer(questions[0], reply_markup=ReplyKeyboardRemove())
        return
    answer = message.text.strip()
    if not re.match(date_regex, answer):
        await message.reply("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11.11.1111")
        return
    await state.update_data(date_of_birth=answer)
    await FormStates.WEIGHT.set()
    await message.answer(questions[2])


async def weight_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.DATE_OF_BIRTH.set()
        await message.answer(questions[1], reply_markup=step_back)
        return
    answer = message.text.strip()
    await state.update_data(weight=answer)
    await FormStates.HEIGHT.set()
    await message.answer(questions[3])


async def height_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.WEIGHT.set()
        await message.answer(questions[2])

        return
    answer = message.text.strip()
    await state.update_data(height=answer)
    await FormStates.CITY.set()
    await message.answer(questions[4])


async def city_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.HEIGHT.set()
        await message.answer(questions[3])
        return
    answer = message.text.strip()
    await state.update_data(city=answer)
    await FormStates.NATIONALITY.set()
    await message.answer(questions[5])


async def nationality_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.CITY.set()
        await message.answer(questions[4])
        return
    answer = message.text.strip()
    await state.update_data(nationality=answer)
    await FormStates.REGALIA.set()
    await message.answer(questions[6])


async def regalia_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.NATIONALITY.set()
        await message.answer(questions[5])
        return
    answer = message.text.strip()
    await state.update_data(regalia=answer)
    await FormStates.PASSION.set()
    await message.answer(questions[7])


async def passion_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.REGALIA.set()
        await message.answer(questions[6])
        return
    answer = message.text.strip()
    await state.update_data(passion=answer)
    await FormStates.WORK_OR_STUDY.set()
    await message.answer(questions[8])


async def work_or_study_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.PASSION.set()
        await message.answer(questions[7])
        return
    answer = message.text.strip()
    await state.update_data(work_or_study=answer)
    await FormStates.INSTAGRAM.set()
    await message.answer(questions[9])


async def instagram_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.WORK_OR_STUDY.set()
        await message.answer(questions[8])
        return
    answer = message.text.strip()
    await state.update_data(instagram=answer)
    await FormStates.PHONE_NUMBER.set()
    await message.answer(questions[10], reply_markup=share_contact)


async def phone_number_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.INSTAGRAM.set()
        await message.answer(questions[9], reply_markup=step_back)
        return
    answer = ''
    if message.content_type == "text":
        answer = message.text.strip()
        if not re.match(phone_number_regex, answer):
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998901234567")
            return
    elif message.content_type == "contact":
        answer = message.contact.phone_number

    await state.update_data(phone_number=answer)
    await FormStates.LAST_FIGHT_DATE.set()
    await message.answer(questions[11], reply_markup=step_back)


async def last_fight_date_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.PHONE_NUMBER.set()
        await message.answer(questions[10], reply_markup=share_contact)
        return
    answer = message.text.strip()
    await state.update_data(last_fight_date=answer)
    await FormStates.PHOTO.set()
    await message.answer(questions[12])


async def photo_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.LAST_FIGHT_DATE.set()
        await message.answer(questions[11])
        return
    response = random.choice(["–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ —è —Ñ–æ—Ç–æ –ø—Ä–æ—Å–∏–ª.", "Suratingizni yuboring, birodar.", "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ."])
    if message.content_type == "document":
        await message.reply(f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.")
        return
    elif message.content_type != "photo":
        await message.reply(response)
        return

    answer = f"Photo: {message.photo[-1].file_id}"
    await state.update_data(photo=answer)
    await FormStates.SHADOW_FIGHT_VIDEO.set()
    await message.answer(questions[13])


async def wrong_video_format(message: types.Message, response: str):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.FULL_NAME.set()
        await message.answer(questions[0])
        return
    if message.content_type == "document":
        await message.reply(f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.")
        return True
    elif message.content_type == "video_note":
        await message.reply("–î—Ä—É–∂–∏—â–µ, –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —É –Ω–∞—Å —Å–µ—Ä—å—ë–∑–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è.")
        return True
    elif message.content_type != "video":
        await message.reply(response)
        return True
    return False


async def shadow_fight_video_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.PHOTO.set()
        await message.answer(questions[12])
        return
    response = random.choice(
        ["–í–∏–¥–µ–æ —ç—Ç–æ –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–≤–∏–≥–∞—é—Ç—Å—è.", "Videoni yuboring 'Soya bilan jang'", "–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ."])
    if await wrong_video_format(message, response):
        return
    answer = f"Video: {message.video.file_id}"
    await state.update_data(shadow_fight_video=answer)
    await FormStates.FUNNY_STORY_VIDEO.set()
    await message.answer(questions[14])


async def funny_story_video_handler(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await FormStates.SHADOW_FIGHT_VIDEO.set()
        await message.answer(questions[13])
        return
    response = random.choice(
        ["–í–æ –ø–µ—Ä–≤—ã—Ö, —ç—Ç–æ –Ω–µ –≤–∏–¥–µ–æ, –∞ –≤–æ –≤—Ç–æ—Ä—ã—Ö, —ç—Ç–æ –Ω–µ—Å–º–µ—à–Ω–æ.",
         "Siz bilan sodir bo'lgan kulgili voqeani aytib beradigan videoklipingizni yuboring", "–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ."])
    if await wrong_video_format(message, response):
        return
    answer = f"Video: {message.video.file_id}"
    await state.update_data(funny_story_video=answer)
    await FormStates.SUBMIT_FORM.set()
    await submit_form(message, state)


async def submit_form(message, state):
    data = await state.get_data()
    message_text = f"username: {message.from_user.username}\n"
    media_group = []
    regex = r"^(Photo|Video):(.+)$"

    for i, d in enumerate(data, 1):
        if d != 'media_group':
            d_ = re.sub(r"\s", "", data[d])
            match = re.match(regex, d_)
            if match:
                type_, id_ = match.groups()[0], match.groups()[1]
                args = (id_, message_text) if len(media_group) == 0 else (id_,)
                if type_ == "Photo":
                    media_group.append(types.InputMediaPhoto(*args))
                elif type_ == "Video":
                    media_group.append(types.InputMediaVideo(*args))
            else:
                message_text += f"{i}. {data[d]}\n"
    await state.update_data(media_group=media_group)
    await message.bot.send_media_group(chat_id=message.from_user.id, media=media_group)
    await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ä–º—É –∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å\".", reply_markup=submit)


async def send_form(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        await message.answer(f"{message.from_user.full_name}, –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.",
                             reply_markup=ReplyKeyboardRemove())

        for admin in message.bot['config'].tg_bot.admin_ids:
            await message.bot.send_media_group(chat_id=admin, media=data["media_group"])
        await state.reset_state(with_data=True)
    elif message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        await FormStates.FULL_NAME.set()
        await message.answer(questions[0], reply_markup=ReplyKeyboardRemove())
    elif message.text == "–ù–∞–∑–∞–¥":
        await FormStates.FUNNY_STORY_VIDEO.set()
        await message.answer(questions[14], reply_markup=step_back)


def register_survey(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=['start'], state="*")
    dp.register_message_handler(start_survey, state=FormStates.START_SURVEY)
    dp.register_message_handler(full_name_handler, state=FormStates.FULL_NAME)
    dp.register_message_handler(date_of_birth_handler, state=FormStates.DATE_OF_BIRTH)
    dp.register_message_handler(weight_handler, state=FormStates.WEIGHT)
    dp.register_message_handler(height_handler, state=FormStates.HEIGHT)
    dp.register_message_handler(city_handler, state=FormStates.CITY)
    dp.register_message_handler(nationality_handler, state=FormStates.NATIONALITY)
    dp.register_message_handler(regalia_handler, state=FormStates.REGALIA)
    dp.register_message_handler(passion_handler, state=FormStates.PASSION)
    dp.register_message_handler(work_or_study_handler, state=FormStates.WORK_OR_STUDY)
    dp.register_message_handler(instagram_handler, state=FormStates.INSTAGRAM)
    dp.register_message_handler(phone_number_handler, state=FormStates.PHONE_NUMBER, content_types=["text", "contact"])
    dp.register_message_handler(last_fight_date_handler, state=FormStates.LAST_FIGHT_DATE)
    dp.register_message_handler(photo_handler, state=FormStates.PHOTO, content_types=types.ContentTypes.ANY)
    dp.register_message_handler(shadow_fight_video_handler, state=FormStates.SHADOW_FIGHT_VIDEO,
                                content_types=types.ContentTypes.ANY)
    dp.register_message_handler(funny_story_video_handler, state=FormStates.FUNNY_STORY_VIDEO,
                                content_types=types.ContentTypes.ANY)
    dp.register_message_handler(send_form, state=FormStates.SUBMIT_FORM,
                                content_types=types.ContentTypes.ANY)
